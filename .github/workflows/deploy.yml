name: Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      build-success: ${{ steps.build.outcome == 'success' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run type-check

      - name: Run linting
        run: pnpm run lint

      - name: Build application
        id: build
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          YOOKASSA_SHOP_ID: ${{ secrets.YOOKASSA_SHOP_ID }}
          YOOKASSA_SECRET_KEY: ${{ secrets.YOOKASSA_SECRET_KEY }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            .next/
            public/
            package.json
          retention-days: 7

  # Deploy preview for PRs
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    environment: 
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}

      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true
          working-directory: ./

      - name: Update PR with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );
            
            const commentBody = `## 🚀 Preview Deployment
            
            Your preview deployment is ready!
            
            **🔗 Preview URL:** ${{ steps.deploy.outputs.preview-url }}
            
            **📊 Deployment Details:**
            - **Commit:** ${context.sha.substring(0, 7)}
            - **Branch:** ${context.ref.replace('refs/heads/', '')}
            - **Deployed at:** ${new Date().toISOString()}
            
            **🧪 Next Steps:**
            1. Test the preview deployment
            2. Run smoke tests automatically
            3. Review and merge when ready
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}

      - name: Deploy to Vercel Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env ENVIRONMENT=staging'
          working-directory: ./

      - name: Update staging deployment status
        run: |
          echo "✅ Staging deployment completed"
          echo "🔗 Staging URL: ${{ steps.deploy.outputs.preview-url }}"

      - name: Notify staging deployment
        run: |
          echo "📢 Staging deployment notification"
          # Add your notification logic here (Slack, Discord, email, etc.)

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}

      - name: Pre-deployment checks
        run: |
          echo "🔍 Running pre-deployment checks..."
          
          # Check if critical environment variables are set
          if [ -z "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" ]; then
            echo "❌ NEXT_PUBLIC_SUPABASE_URL is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            echo "❌ STRIPE_SECRET_KEY is not set"
            exit 1
          fi
          
          echo "✅ Pre-deployment checks passed"

      - name: Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env ENVIRONMENT=production'
          working-directory: ./

      - name: Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
          # Check if deployment is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.preview-url }})
          if [ $response -eq 200 ]; then
            echo "✅ Production deployment is accessible"
          else
            echo "❌ Production deployment returned HTTP $response"
            exit 1
          fi

      - name: Update production deployment status
        run: |
          echo "✅ Production deployment completed"
          echo "🔗 Production URL: ${{ steps.deploy.outputs.preview-url }}"
          echo "📅 Deployed at: $(date)"
          echo "🔨 Commit: ${{ github.sha }}"

      - name: Create deployment tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          tag_name="production-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$tag_name" -m "Production deployment: ${{ github.sha }}"
          git push origin "$tag_name"
          
          echo "🏷️ Created deployment tag: $tag_name"

      - name: Notify production deployment
        run: |
          echo "📢 Production deployment notification"
          # Add your notification logic here (Slack, Discord, email, etc.)

  # Manual deployment workflow
  deploy-manual:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}

      - name: Determine deployment environment
        id: env
        run: |
          case "${{ github.event.inputs.environment }}" in
            "production")
              echo "vercel-args=--prod --env ENVIRONMENT=production" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "vercel-args=--prod --env ENVIRONMENT=staging" >> $GITHUB_OUTPUT
              ;;
            "preview")
              echo "vercel-args=--env ENVIRONMENT=preview" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ steps.env.outputs.vercel-args }}
          working-directory: ./

      - name: Manual deployment summary
        run: |
          echo "🚀 Manual deployment completed"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"
          echo "🔗 URL: ${{ steps.deploy.outputs.preview-url }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "📅 Deployed at: $(date)"

  # Cleanup old preview deployments
  cleanup-previews:
    name: Cleanup Old Previews
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'pull_request' && github.event.action == 'closed')
    
    steps:
      - name: Cleanup old Vercel deployments
        uses: actions/github-script@v7
        with:
          script: |
            // This is a placeholder for cleanup logic
            // In practice, you would use Vercel API to clean up old deployments
            console.log('Cleaning up old preview deployments...');
            
            // Example cleanup logic:
            // 1. Get list of deployments older than 7 days
            // 2. Delete deployments that are not production
            // 3. Keep last 5 deployments for each branch
            
            console.log('Cleanup completed');

  # Deployment status summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, deploy-preview, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Deployment Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-summary.md
          echo "**Triggered by:** ${{ github.actor }}" >> deployment-summary.md
          echo "**Event:** ${{ github.event_name }}" >> deployment-summary.md
          echo "**Date:** $(date)" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Deployment Status" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          # Build status
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ Build: SUCCESS" >> deployment-summary.md
          else
            echo "❌ Build: FAILED" >> deployment-summary.md
          fi
          
          # Preview deployment status
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "✅ Preview Deployment: SUCCESS" >> deployment-summary.md
          elif [ "${{ needs.deploy-preview.result }}" = "skipped" ]; then
            echo "⏭️ Preview Deployment: SKIPPED" >> deployment-summary.md
          else
            echo "❌ Preview Deployment: FAILED" >> deployment-summary.md
          fi
          
          # Staging deployment status
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "✅ Staging Deployment: SUCCESS" >> deployment-summary.md
          elif [ "${{ needs.deploy-staging.result }}" = "skipped" ]; then
            echo "⏭️ Staging Deployment: SKIPPED" >> deployment-summary.md
          else
            echo "❌ Staging Deployment: FAILED" >> deployment-summary.md
          fi
          
          # Production deployment status
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "✅ Production Deployment: SUCCESS" >> deployment-summary.md
          elif [ "${{ needs.deploy-production.result }}" = "skipped" ]; then
            echo "⏭️ Production Deployment: SKIPPED" >> deployment-summary.md
          else
            echo "❌ Production Deployment: FAILED" >> deployment-summary.md
          fi
          
          echo "" >> deployment-summary.md
          echo "---" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "Generated by GitHub Actions 🤖" >> deployment-summary.md
          
          cat deployment-summary.md

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
