name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          pnpm audit --audit-level critical --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "Critical vulnerabilities found!"
            cat audit-results.json
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-results
          path: audit-results.json

  # Snyk vulnerability scanning
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif

  # Docker image scanning
  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Dockerfile for scanning
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          RUN npm run build
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF

      - name: Build Docker image
        run: docker build -t bmf001:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bmf001:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: pnpm add -D license-checker

      - name: Check licenses
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0;Unlicense;WTFPL' --excludePrivatePackages > license-report.txt
          cat license-report.txt

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.txt

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint security rules
        run: |
          pnpm add -D eslint-plugin-security
          echo "module.exports = { extends: ['plugin:security/recommended'] };" > .eslintrc.security.js
          npx eslint . -c .eslintrc.security.js --ext .ts,.tsx,.js,.jsx --format json > eslint-security-results.json || true

      - name: Upload ESLint security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-security-results
          path: eslint-security-results.json

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Next.js security configuration
        run: |
          echo "Checking security headers in next.config.ts..."
          if grep -q "X-Frame-Options" next.config.ts; then
            echo "✓ X-Frame-Options configured"
          else
            echo "✗ X-Frame-Options not found"
            exit 1
          fi
          
          if grep -q "X-Content-Type-Options" next.config.ts; then
            echo "✓ X-Content-Type-Options configured"
          else
            echo "✗ X-Content-Type-Options not found"
            exit 1
          fi
          
          if grep -q "Referrer-Policy" next.config.ts; then
            echo "✓ Referrer-Policy configured"
          else
            echo "✗ Referrer-Policy not found"
            exit 1
          fi

  # Environment variables security check
  env-security:
    name: Environment Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for exposed secrets in code
        run: |
          echo "Checking for potential secret exposure..."
          
          # Check for hardcoded API keys, passwords, etc.
          if grep -r -i "api[_-]key\s*=\s*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/; then
            echo "❌ Potential API key found in code"
            exit 1
          fi
          
          if grep -r -i "password\s*=\s*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/; then
            echo "❌ Potential password found in code"
            exit 1
          fi
          
          if grep -r -i "secret\s*=\s*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/; then
            echo "❌ Potential secret found in code"
            exit 1
          fi
          
          echo "✓ No obvious secrets found in code"

      - name: Check .env files are not committed
        run: |
          if [ -f .env ]; then
            echo "❌ .env file found in repository"
            exit 1
          fi
          
          if [ -f .env.local ]; then
            echo "❌ .env.local file found in repository"
            exit 1
          fi
          
          if [ -f .env.production ]; then
            echo "❌ .env.production file found in repository"
            exit 1
          fi
          
          echo "✓ No environment files found in repository"

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, secrets-scan, license-check, sast-scan, security-headers, env-security]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ Dependency scan: PASSED" >> security-summary.md
          else
            echo "❌ Dependency scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.snyk-scan.result }}" = "success" ]; then
            echo "✅ Snyk scan: PASSED" >> security-summary.md
          else
            echo "❌ Snyk scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.secrets-scan.result }}" = "success" ]; then
            echo "✅ Secrets scan: PASSED" >> security-summary.md
          else
            echo "❌ Secrets scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.license-check.result }}" = "success" ]; then
            echo "✅ License check: PASSED" >> security-summary.md
          else
            echo "❌ License check: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.sast-scan.result }}" = "success" ]; then
            echo "✅ SAST scan: PASSED" >> security-summary.md
          else
            echo "❌ SAST scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.security-headers.result }}" = "success" ]; then
            echo "✅ Security headers: PASSED" >> security-summary.md
          else
            echo "❌ Security headers: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.env-security.result }}" = "success" ]; then
            echo "✅ Environment security: PASSED" >> security-summary.md
          else
            echo "❌ Environment security: FAILED" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
